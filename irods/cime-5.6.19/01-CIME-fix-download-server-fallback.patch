check_input_data() only considers the download attempt of the last missing file
to fallback to other servers. This patch fixes the fallback mechanism to jump
to the following server in the list if any of the missing files fails to download.
author: Alex Domingo (Vrije Universiteit Brussel)
diff -W 126 -Nru cesm-2.1.2-orig/cime/scripts/lib/CIME/case/check_input_data.py cesm-2.1.2/cime/scripts/lib/CIME/case/check_input_data.py
--- a/cime/scripts/lib/CIME/case/check_input_data.py	2020-08-14 22:06:06.241002000 +0200
+++ b/cime/scripts/lib/CIME/case/check_input_data.py	2020-08-14 23:08:23.086486481 +0200
@@ -273,7 +273,8 @@
     data_list_files = find_files(data_list_dir, "*.input_data_list")
     expect(data_list_files, "No .input_data_list files found in dir '{}'".format(data_list_dir))
 
-    no_files_missing = True
+    chksum_required = ["gftp", "ftp", "wget"]
+
     if download:
         if protocol not in vars(CIME.Servers):
             logger.warning("Client protocol {} not enabled".format(protocol))
@@ -290,6 +291,7 @@
         else:
             expect(False, "Unsupported inputdata protocol: {}".format(protocol))
 
+    installation_status = True
     for data_list_file in data_list_files:
         logging.info("Loading input file list: '{}'".format(data_list_file))
         with open(data_list_file, "r") as fd:
@@ -303,6 +305,7 @@
                 if description.endswith('datapath'):
                     continue
                 if(full_path):
+                    file_installed = False
                     # expand xml variables
                     full_path = case.get_resolved_value(full_path)
                     rel_path  = full_path.replace(input_data_root, "")
@@ -315,9 +318,9 @@
                         if not os.path.exists(full_path):
                             logging.warning("Model {} missing file {} = '{}'".format(model, description, full_path))
                             if download:
-                                logging.warning("    Cannot download file since it lives outside of the input_data_root '{}'".format(input_data_root))
-                            no_files_missing = False
+                                logging.warning("Cannot download file since it lives outside of the input_data_root '{}'".format(input_data_root))
                         else:
+                            file_installed = True
                             logging.debug("  Found input file: '{}'".format(full_path))
                     else:
                         # There are some special values of rel_path that
@@ -330,24 +333,28 @@
 
                         if ("/" in rel_path and not os.path.exists(full_path)):
                             logger.warning("  Model {} missing file {} = '{}'".format(model, description, full_path))
-                            no_files_missing = False
 
                             if (download):
-                                no_files_missing = _download_if_in_repo(server,
+                                file_installed = _download_if_in_repo(server,
                                                                         input_data_root, rel_path.strip(os.sep),
                                                                         isdirectory=isdirectory)
-                                if no_files_missing:
+                                if file_installed and protocol in chksum_required:
                                     verify_chksum(input_data_root, rundir, rel_path.strip(os.sep), isdirectory)
                         else:
-                            if chksum:
+                            if chksum and protocol in chksum_required:
                                 verify_chksum(input_data_root, rundir, rel_path.strip(os.sep), isdirectory)
                                 logger.info("Chksum passed for file {}".format(os.path.join(input_data_root,rel_path)))
+                            file_installed = True
                             logging.debug("  Already had input file: '{}'".format(full_path))
+
+                    if not file_installed:
+                        installation_status = False
+
                 else:
                     model = os.path.basename(data_list_file).split('.')[0]
                     logging.warning("Model {} no file specified for {}".format(model, description))
 
-    return no_files_missing
+    return installation_status
 
 def verify_chksum(input_data_root, rundir, filename, isdirectory):
     """

#!/usr/bin/env python
#
# Copyright 2020-2020 Vrije Universiteit Brussel
#
# This file is part of cesm-config,
# originally created by the HPC team of Vrije Universiteit Brussel (https://hpc.vub.be),
# with support of Vrije Universiteit Brussel (https://www.vub.be),
# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
# the Flemish Research Foundation (FWO) (http://www.fwo.be/en)
# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
#
# https://github.com/vub-hpc/cesm-config
#
# cesm-config is free software: you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# cesm-config is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with cesm-config. If not, see <http://www.gnu.org/licenses/>.
#
"""
Tool to update XML machine configuration files in CESM v2

@author Alex Domingo (Vrije Universiteit Brussel)
"""

import argparse
import logging
import os
import shutil
import sys

from lxml import etree

VERSION = '1.2.0'

logging.basicConfig(
    format='%(asctime)s - %(levelname)s: %(message)s', datefmt='%d-%m-%Y %H:%M:%S', level=logging.INFO,
)
logger = logging.getLogger()


def error_exit(message, exc=None):
    """
    Graceful exit on error
    - message: (string) custom error message
    - exc: (Exception) optional exception of the error
    """
    if exc:
        error_message = "{}: {}".format(message, exc)
    else:
        error_message = "{}".format(message)

    logger.error(error_message)
    logging.shutdown()

    logger.debug('Aborting')
    sys.exit(1)


class MachineFile:
    """
    Class to handle machine files in XML format
    """

    def __init__(self, filepath):
        """
        Open and parse contents of XML file and determine its root element
        - filepath: (string) path to XML file
        """
        self.xml = {'path': filepath, 'name': filepath.split('/')[-1]}
        self.tree = etree.parse(self.xml['path'])
        self.root = self.tree.getroot()
        self.update = False

        logger.debug("Root of XML file '{}': {}".format(self.xml['path'], self.root.tag))

    def merge_xmlfile(self, extraxml_root):
        """
        Merge elements in root of extra XML into top matching element of current MachineFile
        - extraxml_root: (Element) root element of XML file to merge
        """
        # Find root of extra XML in current MachineFile
        base_anchors = [anchor for anchor in self.root.iter(extraxml_root.tag)]

        if len(base_anchors) == 0:
            raise ValueError("Cannot merge XML: extra XML root element not found in base machine file")
        elif len(base_anchors) > 1:
            logger.warning(
                "Extra XML root element found multiple times in base machine file. Updating first element only!"
            )

        # Pick first matching element as the merge anchor in current MachineFile
        anchor_element = base_anchors[0]
        logger.debug("Found extra XML root element '{}' in base machine file".format(anchor_element.tag))

        for child in extraxml_root:
            # Find existing elements in current MachineFile matching child element of extra XML
            siblings = anchor_element.findall(child.tag)
            if len(siblings) > 0:
                # Insert child after last existing element in anchor element
                logger.debug("Found {} '{}' elements in base machine file".format(len(siblings), child.tag))
                insert_point = anchor_element.index(siblings[-1]) + 1
                anchor_element.insert(insert_point, child)
                info_msg = "Inserted element '{}' from extra XML in position {} of '{}' in base machine file"
                logger.info(info_msg.format(child.tag, insert_point, anchor_element.tag))
            else:
                # Append child after last element in anchor element
                logger.debug("No '{}' elements found in base machine file".format(child.tag))
                anchor_element.append(child)
                info_msg = "Appended '{}' from extra XML to '{}' in base machine file"
                logger.info(info_msg.format(child.tag, anchor_element.tag))
            # Change update status of current MachineFile
            self.update = True

    def save_updated_xmlfile(self):
        """
        Move existing machine file to "self.xml['name'].orig" and save updated MachineFile to "self.xml['name']"
        """
        # Determine a non-existing filename for old machine file
        tentative_savefile = self.xml['path'] + '.orig'

        n = 0
        savefile = tentative_savefile
        while os.path.exists(savefile):
            logger.debug("Path to save old machine file exists: '{}'".format(savefile))
            n += 1
            savefile = '{}.{}'.format(tentative_savefile, n)

        # Save old machine file
        shutil.move(self.xml['path'], savefile)
        logger.info("Old machine file '{}' moved to '{}'".format(self.xml['path'], savefile))

        # Save updated machine file
        self.tree.write(self.xml['path'], xml_declaration=True, pretty_print=True, with_comments=True)
        logger.info("Succesfully saved the updated machine file to '{}'".format(self.xml['path']))


def single_xml_merge(machine_filepath, extra_filepath):
    """
    Read the contents of extra XML file, merge them into the machine XML file and save
    """
    # Machine XML file
    try:
        base_machine = MachineFile(machine_filepath)
    except IOError as err:
        error_exit("Cannot read base machine file '{}'".format(machine_filepath), err)
    except etree.XMLSyntaxError as err:
        error_exit("Base machine file '{}' is malformed".format(machine_filepath), err)
    else:
        logger.info("Succesfuly loaded base machine file '{}'".format(base_machine.xml['path']))

    # Extra XML file
    try:
        extra_machine = MachineFile(extra_filepath)
    except IOError as err:
        error_exit("Cannot read extra XML file '{}'".format(extra_filepath), err)
    except etree.XMLSyntaxError as err:
        error_exit("Extra XML file '{}' is malformed".format(extra_filepath), err)
    else:
        logger.info("Succesfuly loaded extra XML file '{}'".format(extra_machine.xml['path']))

    # Merge extra XML into machine XML file
    info_msg = "Meging extra XML file '{}' into base machine file '{}'..."
    logger.info(info_msg.format(base_machine.xml['name'], extra_machine.xml['name']))

    try:
        base_machine.merge_xmlfile(extra_machine.root)
    except ValueError as err:
        error_exit(err)

    # Save updated machine file
    try:
        base_machine.save_updated_xmlfile()
    except IOError as err:
        error_exit("Failed to write updated machine file to '{}'".format(base_machine.xml['path']), err)


def main():

    # Parse command line arguments
    cli = argparse.ArgumentParser(
        prog='update-cesm-machines',
        description="Update machine configuration files in CESM v2 with additional settings from external XML files.",
    )
    cli.add_argument(
        'cesm_path', default=None, help="Path to directory cime/config/cesm/machines in CESM",
    )
    cli.add_argument(
        'external_path', default=None, help="Path to external directory with extra XML files",
    )
    cli.add_argument(
        '-m', '--machine-files',
        help=(
            "CESM machine files to process. Known machine files are batch, compilers and machines. "
            "Option 'other' allows to update any arbitrary machine file."
        ),
        choices=['batch', 'compilers', 'machines', 'other'],
        default=['batch', 'compilers', 'machines'],
        nargs='+',
    )
    cli.add_argument(
        '-d', '--debug', dest='debug', action='store_true', required=False, help='Enable debug verbosity',
    )
    cli.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(VERSION))
    args = cli.parse_args()

    # Set log level
    if args.debug:
        logger.setLevel(logging.DEBUG)

    # Option 'other' is exclusive
    if 'other' in args.machine_files:
        if len(args.machine_files) > 1:
            non_other_mf = [mf for mf in args.machine_files if mf != 'other']
            logger.warning("Option 'other' is exclusive, ignoring: {}".format(', '.join(non_other_mf)))

        if os.path.isdir(args.cesm_path) or os.path.isdir(args.external_path):
            error_exit("Provided path is a directory. Option 'other' requires two XML files")
        else:
            single_xml_merge(args.cesm_path, args.external_path)

    # The rest of options are known files
    else:
        for input_dir in [args.cesm_path, args.cesm_path]:
            if not os.path.isdir(input_dir):
                error_exit("Provided path is not a directory: {}".format(input_dir))

        for machine_file in args.machine_files:
            machine_xml = 'config_{}.xml'.format(machine_file)
            cesm_machine_filepath = os.path.join(args.cesm_path, machine_xml)
            extra_machine_filepath = os.path.join(args.external_path, machine_xml)

            single_xml_merge(cesm_machine_filepath, extra_machine_filepath)


if __name__ == "__main__":
    main()
